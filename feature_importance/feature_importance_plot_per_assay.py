# -*- coding: utf-8 -*-
"""Feature Importance Plot Per Assay

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19hzJZRBvl3W534xytUgjymjPl-pnWKxL

## Bar plot for feature importance
This notebook make a horizontal bar plot for the feature importance using ridge regressions' feature coefficients. The feature importance is based on the median value of each feature in the 50 assays. I didn't take the mean value because fr_aniline has a extreme value in one of the assay.
"""

import random
import math

import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.compose import ColumnTransformer
from sklearn import metrics
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler,LabelBinarizer
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, balanced_accuracy_score, RocCurveDisplay, PrecisionRecallDisplay, ConfusionMatrixDisplay
from sklearn.linear_model import Lasso
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

# import pymc as pm
# import arviz as az
from google.colab import drive

drive.mount('/content/drive')

# Set working directory
path = '/content/drive/My Drive/Tox21/hierarchical_model/'

# read feature coefficients
path = '/content/drive/My Drive/Tox21_data/'
# ridge_coef = pd.read_csv(path + 'Unbalanced weight feature coefficients.csv')
ridge_coef_w = pd.read_csv(path + 'Balanced weight feature coefficients_new2.csv')
# ridge_coef_w = pd.read_csv(path + 'Balanced weight feature coefficients_lasso.csv')
ridge_coef_w

ridge_coef_w = ridge_coef_w.rename(columns = {'Unnamed: 0': 'Features'})
# ridge_coef_w.iloc[:,1:] = abs(ridge_coef_w.iloc[:,1:])
# ridge_coef_w.sort_values(by=['tox21-ahr-p1'], ascending=False)
ridge_coef_w['mean'] = ridge_coef_w.mean(axis=1)
ridge_coef_w

categories = []
for i in ridge_coef_w.Features:
  if i.startswith('fr_'):
    categories.append('Fraction of a substructure')
  elif i.startswith('PEOE'):
    categories.append('MOE type - Partial Charges')
  elif i.startswith('SlogP'):
    categories.append('MOE type - LogP')
  elif i.startswith('SMR'):
    categories.append('MOE type - MR')
  elif i.startswith('EState') or i.startswith('VSA'):
    categories.append('MOE type - EState')
  elif i.startswith('BCUT2D'):
    categories.append('BCUT type')
  else:
    categories.append('physicochemical properties')
ridge_coef_w['category'] = categories
ridge_coef_w

path = '/content/drive/My Drive/Tox21_data/'
xls = pd.ExcelFile(path + 'Tox21/assay_list.xls')
# to read just one sheet to dataframe:
df = []
for i in range(len(xls.sheet_names)):
    df1 = xls.parse(i)
    df.append(df1)

xls2 = pd.ExcelFile(path + 'Tox21/assay_list2.xls')

for i in range(len(xls2.sheet_names)):
    df1 = xls2.parse(i)
    df.append(df1)

len(df)

assay_name = []
for i in range(len(df)):
    one_assay = df[i]
    y = one_assay.columns[1]
    assay_name.append(y)

my_list = [str(x) for x in range(1, 51)]
string = 'assay'
col_name = [string + s for s in my_list]
col_name = col_name*5
print(col_name)

fea_df = ridge_coef_w.iloc[:, 1: -2]
fea_df.columns = col_name
fea_df

import numbers
fea_df = fea_df.groupby(by=fea_df.columns, axis=1).apply(lambda g: g.mean(axis=1) if isinstance(g.iloc[0,0], numbers.Number) else g.iloc[:,0])
fea_df

cols = col_name[:50]
new_fea_df = fea_df[cols]
new_fea_df.insert(loc=0, column='features', value=ridge_coef_w['Features'])
# 1) y = assay, x = feature, z = value one plot
# save to csv
# 2) feature voating*

new_fea_df.to_csv(path + 'mean_feature_coefficients_per_assay_noabs.csv', index=False)

path = '/content/drive/My Drive/Tox21_data/'
fea_df = pd.read_csv(path + 'mean_feature_coefficients_per_assay_noabs.csv')
# fea_df = fea_df.set_index('features')
ay1 = fea_df.iloc[:,[0,1]]
col_name = ay1.columns[1]
ay1 = ay1.sort_values(col_name, ascending=False)
ay1['rank1'] = list(range(1,41))
fea_df

fea_df = fea_df.set_index('features')
for i in range(50):
  np.arcsinh(fea_df.iloc[:,0])

fig = plt.figure(figsize = (30,30))
# ax = sns.heatmap(fea_df.set_index('features'), cmap='vlag')
ax = sns.clustermap(fea_df, cmap = 'vlag', z_score = 1, center=0, figsize=(30, 30))
# ax.axes.set_title('Assay by Features heatmap',fontsize=30)
# ax.set_xlabel("Assays",fontsize=20)
# ax.set_ylabel("Features",fontsize=20)
ax.tick_params(labelsize=20)
# cbar = ax.collections[0].colorbar
# cbar.ax.tick_params(labelsize=20)

fig = plt.figure(figsize=(20,20))
corr = fea_df.corr(method='kendall')
# matrix = np.triu(np.ones_like(corr, dtype=bool))
ax = sns.heatmap(corr, cmap="vlag", annot=False)
                #  , mask = matrix)
ax.axes.set_title('Assay by Assay Pairwise Tau using non absolute value of coefficients',fontsize=30)
ax.set_xlabel("Assays",fontsize=20)
ax.set_ylabel("Features",fontsize=20)
ax.tick_params(labelsize=20)
cbar = ax.collections[0].colorbar
cbar.ax.tick_params(labelsize=20)

ax = sns.clustermap(corr, cmap = 'vlag', figsize=(30, 30), row_cluster=False, col_cluster=False)
ax.tick_params(labelsize=20)

df_list = []
for i in range(50):
  ay = fea_df.iloc[:, [0, i+1]]
  col_name = ay.columns[1]
  ay = ay.sort_values(col_name, ascending=False)
  rank_name = 'assay' + "_" + str(i+1)
  ay[rank_name] = list(range(1,41))
  df_list.append(ay)

new_df_list = []
for i in df_list:
  new_df = pd.merge(fea_df.features, i, on='features')
  new_df_list.append(new_df)

new_df = pd.concat(new_df_list, axis=1)
new_df = new_df[new_df.columns[pd.Series(new_df.columns).str.startswith('assay_')]]
new_df.insert(0, 'features', fea_df.features)
# new_df

new_df

new_df.to_csv(path + 'feature_ranks.csv', index=False)

# new_df_rank_order = new_df.copy(deep=True)
# new_df_rank_order = new_df_rank_order.set_index('features')
# new_df_rank_order['rank<=1'] =
path = '/content/drive/My Drive/Tox21_data/'
new_df = pd.read_csv(path + 'feature_ranks.csv')

fig = plt.figure(figsize=(20,20))
corr = new_df.corr(method='kendall')
matrix = np.triu(np.ones_like(corr, dtype=bool))
ax = sns.heatmap(corr, cmap="Blues", annot=False, mask = matrix)
ax.axes.set_title('Assay by Assay Pairwise Tau using rank',fontsize=30)
ax.set_xlabel("Assays",fontsize=20)
ax.set_ylabel("Assays",fontsize=20)
ax.tick_params(labelsize=20)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
cbar = ax.collections[0].colorbar
cbar.ax.tick_params(labelsize=20)

ax = sns.clustermap(corr, cmap = 'vlag', z_score = 1,figsize=(30, 30), row_cluster=False)
ax.tick_params(labelsize=20)

a_df = pd.DataFrame(assay_name)
a_df['assay'] = col_name[:50]
a_df





for i in range(40):
  print(new_df.iloc[i, 0])
  a = new_df.iloc[i, 1:].value_counts()
  print(a)

mode_rank = []
for i in range(40):
  a = new_df.iloc[i, 1:].value_counts().index[0]
  mode_rank.append(a)

mode_rank_df = pd.DataFrame(mode_rank,columns = ['rank'])
mode_rank_df.insert(0, 'features', fea_df.features)
mode_rank_df

# mode_rank_df.sort_values('rank').plot(kind='bar', xticks='features')
mode_rank_df.sort_values('rank').plot(y='rank', kind='bar').set_xticks(mode_rank_df.index, mode_rank_df.features)
plt.title('feature ranking across 50 assays and 5 fold by vote')
plt.show()

df_3d = fea_df.set_index('features')
df_3d = df_3d.iloc[:6, :]

from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

# thickness of the bars
dx, dy = .5, .5

# prepare 3d axes
fig = plt.figure(figsize=(40,24))
ax = fig.add_subplot(projection='3d')

# set up positions for the bars
xpos=np.arange(df_3d.shape[0])
# print(xpos)
ypos=np.arange(df_3d.shape[1])

# set the ticks in the middle of the bars
ax.set_xticks(xpos + dx/2)
ax.set_yticks(ypos + dy/2)

# create meshgrid
# print xpos before and after this block if not clear
xpos, ypos = np.meshgrid(xpos, ypos)
xpos = xpos.flatten()
ypos = ypos.flatten()

# the bars starts from 0 attitude
zpos=np.zeros(df_3d.shape).flatten()

# the bars' heights
dz = df_3d.values.ravel()
dx = dy = 0.5 * np.ones_like(zpos)
# print(dz[:100])
xposM, yposM = np.meshgrid(xpos, ypos, copy=False)
# plot
values = (dz-dz.min())/np.float_(dz.max()-dz.min())
colors = cm.Reds(values)
ax.bar3d(xpos,ypos,zpos,dx,dy,dz, color=colors)

# put the column / index labels
ax.yaxis.set_ticklabels(df_3d.columns)
ax.xaxis.set_ticklabels(df_3d.index)

# name the axes
ax.set_xlabel('Features', fontsize=16)
ax.set_ylabel('Assays', fontsize=16)
ax.set_zlabel('abs(coefficient)', fontsize=16)

ax.tick_params(axis='both', which='major', labelsize=16)
ax.tick_params(axis='both', which='minor', labelsize=16)
ax.zaxis.set_tick_params(labelsize=16)

plt.show()

df_3d_2 = df_3d.iloc[:, :35]
dx, dy = .5, .5

# prepare 3d axes
fig = plt.figure(figsize=(40,24))
ax = fig.add_subplot(projection='3d')

# set up positions for the bars
xpos=np.arange(df_3d_2.shape[0])
# print(xpos)
ypos=np.arange(df_3d_2.shape[1])

# set the ticks in the middle of the bars
ax.set_xticks(xpos + dx/2)
ax.set_yticks(ypos + dy/2)

# create meshgrid
# print xpos before and after this block if not clear
xpos, ypos = np.meshgrid(xpos, ypos)
xpos = xpos.flatten()
ypos = ypos.flatten()

# the bars starts from 0 attitude
zpos=np.zeros(df_3d_2.shape).flatten()

# the bars' heights
dz = df_3d_2.values.ravel()
dx = dy = 0.5 * np.ones_like(zpos)

# plot
values = (dz-dz.min())/np.float_(dz.max()-dz.min())
colors = cm.Reds(values)
ax.bar3d(xpos,ypos,zpos,dx,dy,dz, color=colors)

# put the column / index labels
ax.yaxis.set_ticklabels(df_3d_2.columns)
ax.xaxis.set_ticklabels(df_3d_2.index)

# name the axes
ax.set_xlabel('Features', fontsize=16)
ax.set_ylabel('Assays', fontsize=16)
ax.set_zlabel('abs(coefficient)', fontsize=16)

ax.tick_params(axis='both', which='major', labelsize=16)
ax.tick_params(axis='both', which='minor', labelsize=16)
ax.zaxis.set_tick_params(labelsize=16)

plt.show()

df_3d.iloc[:,30:50]













from scipy.stats import sem
ridge_coef_w['std'] = sem(ridge_coef_w.iloc[:,1:251], axis=1)
ridge_coef_w['std_np'] = np.std(ridge_coef_w.iloc[:,1:251], axis=1)
coef_plot = ridge_coef_w[['Features', 'mean', 'category', 'std', 'std_np']]
coef_plot = coef_plot.sort_values(by=['mean'])
coef_plot

f, ax = plt.subplots(figsize=(10, 8))
colors = {'MOE type - EState': 'indianred', 'Fraction of a substructure': 'rosybrown', 'MOE type - LogP': 'limegreen',
          'MOE type - MR':'gold', 'MOE type - Partial Charges': 'orange',
          'physicochemical properties': 'mediumpurple', 'BCUT type': 'skyblue'}
plt.barh(data = coef_plot, y='Features', width='mean', color=[colors[i] for i in coef_plot.category])
plt.errorbar(data = coef_plot, y='Features', x='mean', xerr = 'std_np', fmt ='none', capsize=3)

labels = coef_plot['category'].unique()
handles = [plt.Rectangle((0,0),1,1, color=colors[l]) for l in labels]
plt.legend(handles, labels, title="Categories")
plt.title('Ridge Regression Feature importance')
plt.xlabel('Feature Importance')
plt.ylabel('Chemical Descriptors')
# plt.savefig(path + 'lasso_new.png', dpi=1200, bbox_inches='tight')
plt.show()

coef_plot.to_csv(path + 'ridge_feature_ranking.csv', index=False)